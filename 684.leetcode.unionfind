class Solution {
public:
    int find(int ch,vector<pair<int,int>> &parent){
        if(parent[ch].first==ch) return ch;
        return parent[ch].first=find(parent[ch].first,parent);
    }
    
    bool Union(int e1,int e2,vector<pair<int,int>> &parent){
        int p1=find(e1,parent);
        int p2=find(e2,parent);
        if(p1==p2) return 1;
        else if(parent[p1].second<parent[p2].second){
            parent[p1].first=p2;
        }
        else if(parent[p1].second>parent[p2].second){
            parent[p2].first=p1;
        }
        else{
            parent[p2].first=p1;
            parent[p1].second++;
        }
        return 0;
    }
    
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        vector<pair<int,int>> parent(edges.size()+1);
        for(int i=0;i<parent.size();i++){
            parent[i].first=i;
            parent[i].second=0;
        }
        for(auto edge:edges){
            if(Union(edge[0],edge[1],parent)) return edge;
            // cout<<edge[0]<<" "<<edge[1]<<endl;
        }     
        return {};
    }
    
};
